(set-logic LRA)
(set-info :status unsat)
(declare-fun v1 () Real)
(declare-fun ts8uscore0 () Real)
(declare-fun A () Real)
(declare-fun v1uscore1dollarskuscore8 () Real)
(declare-fun B () Real)
(declare-fun v2 () Real)
(declare-fun I1 () Real)
(declare-fun I2 () Real)
(declare-fun x2 () Real)
(declare-fun I1uscore1dollarskuscore8 () Real)
(declare-fun x1 () Real)
(declare-fun xI1 () Real)
(declare-fun v2uscore1dollarskuscore8 () Real)
(declare-fun V () Real)
(declare-fun xI2 () Real)
(declare-fun ep () Real)
(declare-fun I2uscore1dollarskuscore8 () Real)
(declare-fun t8uscore0 () Real)
(declare-fun x2uscore1dollarskuscore7 () Real)
(declare-fun x1uscore1dollarskuscore8 () Real)
(assert (not (exists ((ts8uscore0 Real)) (let ((?v_0 (= 1 2))) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= v2uscore1dollarskuscore8 0) (= v1uscore1dollarskuscore8 V)) (= xI1 x1uscore1dollarskuscore8)) (= I2uscore1dollarskuscore8 0)) (= I1uscore1dollarskuscore8 0)) (= I1uscore1dollarskuscore8 2)) (= I1 2)) (< xI1 x1)) (= I2 2)) (< xI2 x2)) (> B 0)) (>= v1 0)) (<= v1 V)) (>= v2 0)) (<= v2 V)) (>= A 0)) (> V 0)) (> ep 0)) (or (= xI2 x2uscore1dollarskuscore7) (=> (>= t8uscore0 0) (=> (=> (and (<= 0 ts8uscore0) (<= ts8uscore0 t8uscore0)) (and (and (and (and (>= v1uscore1dollarskuscore8 0) (<= v1uscore1dollarskuscore8 V)) (>= v2uscore1dollarskuscore8 0)) (<= v2uscore1dollarskuscore8 V)) (<= (+ ts8uscore0 0) ep))) (or ?v_0 ?v_0)))))))))
(check-sat)
(exit)
