(set-logic ALIA)
(set-info :source |piVC|)
(set-info :smt-lib-version 2.0)
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun V_6 () Int)
(declare-fun e () Int)
(declare-fun a () (Array Int Int))
(declare-fun ix () Int)
(declare-fun t_1 () Bool)
(assert (let ((?v_0 (>= V_6 0)) (?v_1 (not t_1))) (and (and (and (forall ((?V_12 Int)) (=> (and (<= 0 ?V_12) (<= ?V_12 (- V_6 1))) (forall ((?V_13 Int)) (=> (and (<= 0 ?V_13) (<= ?V_13 ?V_12)) (<= (select a ?V_13) (select a ?V_12)))))) ?v_0) (and (and (or t_1 (forall ((?V_11 Int)) (=> (and (<= 0 ?V_11) (<= ?V_11 (- V_6 1))) (not (= (select a ?V_11) e))))) (or ?v_1 (exists ((?V_10 Int)) (and (and (<= 0 ?V_10) (<= ?V_10 (- V_6 1))) (= (select a ?V_10) e))))) (and (forall ((?V_8 Int)) (=> (and (<= 0 ?V_8) (<= ?V_8 (- V_6 1))) (forall ((?V_9 Int)) (=> (and (<= 0 ?V_9) (<= ?V_9 ?V_8)) (<= (select a ?V_9) (select a ?V_8)))))) ?v_0))) (or (and ?v_1 (exists ((?V_7 Int)) (and (and (<= 0 ?V_7) (<= ?V_7 (- V_6 1))) (= (select a ?V_7) e)))) (and t_1 (forall ((?V_5 Int)) (=> (and (<= 0 ?V_5) (<= ?V_5 (- V_6 1))) (not (= (select a ?V_5) e)))))))))
(check-sat)
(exit)
