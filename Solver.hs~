module Solver where
{--|
  Module with just the Solver type and the methods to start a solver
--}

import           SMTLib2
import           Control.Monad
import           ContextCmd        (ContextArgs)

--Later one Sexp will be the parsing of a s-expression from the result of the solver
type Sexp = String

--Error will be the string read if any string is read from the std_err
type Error = String

--Future type of result when we change the Process.hs
--type Result = (Sexp,Maybe Error)
type Result = String

type CtResult=(IO Result,ContextArgs)

data Solver = Solver
            { setLogic      :: Name -> IO Result
            , setOption     :: Option -> IO Result
            , setInfo       :: Attr -> IO Result
            , declareType   :: Name -> Integer -> IO Result
            , defineType    :: Name -> [Name] -> Type -> IO Result
            , declareFun    :: Name -> [Type] -> Type -> IO Result
            , push          :: Integer -> IO Result
            , pop           :: Integer -> IO Result
            , assert        :: Expr -> IO Result
            , checkSat      :: IO Result
            , getAssertions :: IO Result
            , getValue      :: [Expr]-> IO Result
            , getProof      :: IO Result
            , getUnsatCore  :: IO Result
            , getInfo       :: InfoFlag -> IO Result
            , getOption     :: Name -> IO Result
            , exit          :: IO Result
            }
	    | CtSolver
            { setLogicCt      :: ContextArgs -> Name ->  CtResult
            , setOptionCt     :: ContextArgs -> Option ->  CtResult
            , setInfoCt       :: ContextArgs -> Attr ->  CtResult
            , declareTypeCt   :: ContextArgs -> Name -> Integer ->  CtResult
            , defineTypeCt    :: ContextArgs -> Name -> [Name] -> Type ->  CtResult
            , declareFunCt    :: ContextArgs -> Name -> [Type] -> Type ->  CtResult
            , pushCt          :: ContextArgs -> Integer ->  CtResult
            , popCt           :: ContextArgs -> Integer ->  CtResult
            , assertCt        :: ContextArgs -> Expr ->  CtResult
            , checkSatCt      ::  ContextArgs -> CtResult
            , getAssertionsCt ::  ContextArgs -> CtResult
            , getValueCt      :: ContextArgs -> [Expr]->  CtResult
            , getProofCt      ::  ContextArgs -> CtResult
            , getUnsatCoreCt  ::  ContextArgs -> CtResult
            , getInfoCt       :: ContextArgs -> InfoFlag ->  CtResult
            , getOptionCt     :: ContextArgs -> Name ->  CtResult
            , exitCt          ::  ContextArgs -> CtResult
            }



